{"version":3,"sources":["api/Openweather.jsx","components/SearchBar.jsx","components/WeatherItem.jsx","components/OneDay.jsx","south_east.svg","north_west.svg","components/AllWeather.jsx","components/App.jsx","index.js"],"names":["axios","create","baseURL","params","appid","SearchBar","state","term","onFormSubmit","event","preventDefault","props","onSubmit","setState","document","activeElement","blur","className","this","type","value","onChange","e","target","React","Component","WeatherItem","city","select","toUpperCase","OneDay","tomorrowUTC","time","date","Date","setHours","tomorrow","setDate","getDate","offset","getTimezoneOffset","search","times","i","days","length","push","dt","dayName","getUTCDay","dayName1","dayName2","day1ID","indexOf","day2ID","day1IDFirst","day2IDFirst","dayIDLast","day1IDLast","day2IDLast","handleClick","selectDay","day","dayStart","dayEnd","color","day2","day3","icon","weather","url","temp","Math","round","main","icon2","url2","temp2","icon3","url3","temp3","style","backgroundColor","color1","onClick","alt","src","color2","color3","AllWeather","start","dayIdStart","end","koira","oneDay","slice","windIcon","wind","NW","SE","id","newId","row","rowWind","rowWindIcon","weatherIcon","selecIcon","timecode","hours","getHours","sort","a","b","map","item","allIcons","oneIcon","gridRowStart","allTemps","tempHour","allWind","speed","allWindDir","deg","windDir","App","selectedDay","dayIDstart","dayIDend","onSearchSubmit","Search","catch","error","response","request","Openweather","get","q","units","lang","data","list","localStorage","setItem","handler","dayNameHandler","name","dayStartHandler","dayEndHandler","colorHandler","code1","code2","code3","memory","getItem","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.2659e073.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst KEY = 'fd3a962fb879d1c392826e0c9a6ea960'\n\nexport default axios.create({\n    baseURL: 'https://api.openweathermap.org',\n    params: { appid: KEY }\n});","import './SearchBar.css';\nimport React from 'react';\n\n// SearchBar component\nclass SearchBar extends React.Component {\n    state = { term: '' };\n\n    onFormSubmit = (event) => {\n        // prevent default form action\n        event.preventDefault();\n\n        // update search term to App component\n        this.props.onSubmit(this.state.term)\n\n        // empty searchbar after submit\n        this.setState({ term: '' })\n\n        // close mobile devise keyboard after submit\n        document.activeElement.blur();\n\n    };\n\n    render() {\n        return (\n            <div className=\"search-bar-box\">\n                <div className=\"search-bar ui segment\">\n                    <form onSubmit={this.onFormSubmit} className=\"ui form\">\n                        <div className=\"field\">\n                            <label>Kaupunki:</label>\n                            {/*Set search value from state and send new search value to state*/}\n                            <input type=\"text\" value={this.state.term} onChange={(e) => this.setState({ term: e.target.value })} />\n                        </div>\n                    </form>\n\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default SearchBar;","import './Weather1.css'\nimport React from 'react';\n\n\nconst WeatherItem = (props) => {\n    const city = props.city\n\n    const smallOrBig = () => {\n        if (!props.select) {\n            return city\n        } else {\n            const cityUp = city.toUpperCase()\n            return cityUp\n        }\n    }\n\n\n    return (\n        <div className=\" ui cards wall\">\n            <div className=\"card\">\n                <div className=\"content\">\n                    <div className=\"header\">{smallOrBig()}</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default WeatherItem;","import './OneDay.css'\nimport React from 'react';\n\nconst OneDay = (props) => {\n\n\n    // Show 'Loading...' if api not nownloaded\n    if (!props.select) {\n\n        return <div></div>\n    }\n\n\n    //console.log(props.select, props.days, props.city, 'OneDay2')\n\n    // Tomorrow UTC 12.00\n    const tomorrowUTC = (time) => {\n\n\n        let date = new Date(); //get today date\n\n        date.setHours(time, 0, 0, 0) // set time\n        let tomorrow = date.setDate(date.getDate() + 1) // get tomorrow date and time in milliseconds\n        let offset = new Date().getTimezoneOffset() * 60000; //get timezone offset in milliseconds\n\n\n        if (offset <= 0) {\n            let tomorrowUTC = tomorrow - offset // remove ofsset\n            tomorrowUTC = (tomorrowUTC) / 1000; // remove 2 last digits\n            return tomorrowUTC;\n        } else {\n            let tomorrowUTC = tomorrow + offset // add offset\n            tomorrowUTC = (tomorrowUTC) / 1000; // remove 2 last digits\n            return tomorrowUTC;\n        }\n\n    }\n\n    // pull all timecodes from the api and put them in array 'times'\n    const search = () => {\n\n        let times = [];\n\n        for (let i = 0; i < props.days.length; i++) {\n            times.push(props.days[i].dt);\n        }\n\n\n        return times;\n    }\n\n    // Determine the name of the day from given UTC-code\n    const dayName = (e) => {\n        const days = ['Sunnuntai', 'Maanantai', 'Tiistai', 'Keskiviikko', 'Torstai', 'Perjantai', 'Lauantai'];\n\n        return days[(new Date(e).getUTCDay())]\n    };\n\n\n    // get the name for tomorrow and day after that\n    const dayName1 = dayName(tomorrowUTC(12) * 1000)\n    const dayName2 = dayName((tomorrowUTC(12) + 86400) * 1000)\n\n    // get the index number for tomorrof and day after that\n    const day1ID = search().indexOf(tomorrowUTC(12));\n    const day2ID = search().indexOf(tomorrowUTC(12) + 86400);\n\n\n    // get data to show detatailed information:\n\n    // get index numbers for first weather (00:00)\n    const day1IDFirst = search().indexOf(tomorrowUTC(0));\n    const day2IDFirst = search().indexOf(tomorrowUTC(0) + 86400);\n\n    // get index number for last weather (21:00)\n    const dayIDLast = search().indexOf(tomorrowUTC(21) - 86400);\n    const day1IDLast = search().indexOf(tomorrowUTC(21));\n    const day2IDLast = search().indexOf(tomorrowUTC(21) + 86400);\n\n\n\n\n\n    // Handle click from weathercard and update state in App component\n    const handleClick = (e) => {\n\n        props.selectDay(e);\n\n        //Update name of the day, day color and day start/end timecodes to App state\n        if (e === 1) {\n            props.dayName(day);\n            props.dayStart(0);\n            props.dayEnd(dayIDLast);\n            props.color('rgb(230,230,230', '', '')\n        } else if (e === 2) {\n            props.dayName(day2)\n            props.dayStart(day1IDFirst);\n            props.dayEnd(day1IDLast);\n            props.color('', 'rgb(230,230,230', '')\n        } else if (e === 3) {\n            props.dayName(day3)\n            props.dayStart(day2IDFirst);\n            props.dayEnd(day2IDLast);\n            props.color('', '', 'rgb(230,230,230)')\n        } else {\n            props.dayName(day);\n            props.dayStart(0);\n            props.dayEnd(dayIDLast)\n        }\n\n    }\n\n    // variables for different days\n\n    // today\n    const icon = props.days[0].weather[0].icon\n    const url = `http://openweathermap.org/img/wn/${icon}.png`\n    const temp = Math.round(props.days[0].main.temp)\n    const day = 'Tänään'\n\n    // day 2\n    const icon2 = props.days[day1ID].weather[0].icon\n    const url2 = `http://openweathermap.org/img/wn/${icon2}.png`\n    const temp2 = Math.round(props.days[day1ID].main.temp)\n    const day2 = dayName1\n\n    // day 3\n    const icon3 = props.days[day2ID].weather[0].icon\n    const url3 = `http://openweathermap.org/img/wn/${icon3}.png`\n    const temp3 = Math.round(props.days[day2ID].main.temp)\n    const day3 = dayName2\n\n\n    // ui link eight doubling cards wall\n\n    return (\n        <div className=\"ui link eight doubling cards wall\" >\n            <div className=\"better-card\" style={{ backgroundColor: props.color1 }} onClick={() => { handleClick(1) }}>\n                <div className=\"better-content\">\n                    <div className=\"better-content-header\">{day}</div>\n                    <img className=\"better-content-icon\" alt=\"\" src={url} />\n                    <div className=\"better-content-temp\">{temp}  ℃ </div>\n                </div>\n            </div>\n            <div className=\"better-card center\" style={{ backgroundColor: props.color2 }} onClick={() => { handleClick(2) }}>\n                <div className=\"better-content\">\n                    <div className=\"better-content-header\">{day2}</div>\n                    <img className=\"better-content-icon\" alt=\"\" src={url2} />\n                    <div className=\"better-content-temp\">{temp2}  ℃ </div>\n                </div>\n            </div>\n            <div className=\"better-card\" style={{ backgroundColor: props.color3 }} onClick={() => { handleClick(3) }}>\n                <div className=\"better-content\">\n                    <div className=\"better-content-header\">{day3}</div>\n                    <img className=\"better-content-icon\" alt=\"\" src={url3} />\n                    <div className=\"better-content-temp\">{temp3}  ℃ </div>\n                </div>\n            </div>\n        </div>);\n\n\n};\n\nexport default OneDay;","export default __webpack_public_path__ + \"static/media/south_east.bcd01cf9.svg\";","export default __webpack_public_path__ + \"static/media/north_west.92ffce4a.svg\";","import './AllWeather.css';\nimport React from 'react';\n\nimport North from '@material-ui/icons/ArrowUpward';\nimport East from '@material-ui/icons/ArrowForward';\nimport South from '@material-ui/icons/ArrowDownward';\nimport West from '@material-ui/icons/ArrowBack';\nimport NI from '@material-ui/icons/CallMade';\nimport SE from '../south_east.svg';\nimport SW from '@material-ui/icons/CallReceived';\nimport NW from '../north_west.svg';\n\nconst AllWeather = (props) => {\n    if (!props.select) {\n\n        return <div></div>\n    };\n    //console.log(props.days)\n\n    // Get start and end time index from props \n    // the crazy name \"koira\" is there because for some reason nothing else works\n    const start = props.dayIdStart;\n    const end = props.koira;\n\n    // Make a new array from a selected day\n    const allDays = props.days\n    const oneDay = allDays.slice(start, end + 1)\n\n    // Make a new \"times\" array where are all local times for selected day\n    const time = () => {\n\n        let times = [];\n\n        if (start === null) {\n            return times\n        }\n\n        for (let i = 0; i < oneDay.length; i++) {\n\n            let timecode = props.days[i].dt;\n            let date = new Date(timecode * 1000);\n            let hours = date.getHours();\n\n            if (hours < 10) {\n                times.push('0' + hours)\n            } else {\n                times.push(hours)\n            }\n        }\n\n        times.sort(function (a, b) { return a - b });\n\n        return times\n\n    };\n\n\n    const temp = () => {\n        let allTemps = []\n\n        if (start === null) {\n            return allTemps\n        }\n\n        for (let i = 0; i < oneDay.length; i++) {\n            let tempHour = Math.round(oneDay[i].main.temp);\n            allTemps.push(tempHour);\n        }\n        return allTemps;\n    };\n\n    const wind = () => {\n        let allWind = [];\n\n        if (start === null) {\n            return allWind\n        }\n\n        for (let i = 0; i < oneDay.length; i++) {\n            let speed = Math.round(oneDay[i].wind.speed);\n            allWind.push(speed);\n        }\n        return allWind;\n\n\n    };\n\n    const windDir = () => {\n        let allWindDir = [];\n\n        if (start === null) {\n            return allWindDir\n        }\n\n        for (let i = 0; i < oneDay.length; i++) {\n            let wind = oneDay[i].wind.deg;\n            allWindDir.push(wind);\n        }\n        return allWindDir;\n\n\n    };\n\n\n    const windIcon = (wind) => {\n        if (wind > 20 & wind < 70) {\n            return <SW />\n        }\n        if (wind >= 70 & wind <= 110) {\n            return <West />\n        }\n        if (wind > 110 & wind < 150) {\n            return <img className=\"windDir\" alt=\"NW\" src={NW} />\n        }\n        if (wind >= 150 & wind <= 200) {\n            return <North />\n        }\n        if (wind > 200 & wind < 230) {\n            return <NI />\n        }\n        if (wind >= 230 & wind <= 270) {\n            return <East />\n        }\n        if (wind > 270 & wind < 340) {\n            return <img className=\"windDir\" alt=\"SE\" src={SE} />\n        }\n        if (wind >= 340 & wind <= 360) {\n            return <South />\n        }\n        if (wind >= 0 & wind <= 20) {\n            return <South />\n        }\n\n    };\n\n    const icon = () => {\n        let allIcons = [];\n\n        if (start === null) {\n            return allIcons\n        }\n\n        for (let i = 0; i < oneDay.length; i++) {\n            let oneIcon = oneDay[i].weather[0].icon;\n            allIcons.push(oneIcon);\n        }\n        return allIcons;\n\n\n    };\n\n\n    // Running id number for react key\n    let id = 1\n    const newId = () => {\n        id = id + 1;\n        return id\n    };\n\n    // New running row number starting from 1 for temp css\n    let row = 0\n    const newRow = () => {\n        row = row + 1;\n        return row\n    };\n\n    // New row for wind css\n    let rowWind = 0\n    const newRowWind = () => {\n        rowWind = rowWind + 1;\n        return rowWind\n    };\n\n    // New row for wind icon css\n    let rowWindIcon = 0\n    const newRowWindIcon = () => {\n        rowWindIcon = rowWindIcon + 1;\n        return rowWindIcon\n    };\n\n    // New row for weathericon css\n    let weatherIcon = 0\n    const newWeatherIcon = () => {\n        weatherIcon = weatherIcon + 1;\n        return weatherIcon\n    };\n\n\n    const selecIcon = (icon) => {\n        return `http://openweathermap.org/img/wn/${icon}.png`\n    }\n\n\n    return (\n        <div className=\"ui cards wall\">\n            <div className=\"card main\" style={{ backgroundColor: \"rgb(230,230,230)\" }}>\n                <div className=\"content\">\n                    <div className=\"header\">{props.dayName}</div>\n                    <div className=\"detail-container\">\n                        {time().map(item => <div className=\"item-a\" key={newId()}>{item}:00 </div>)}\n                        {icon().map(item => <img alt={item} style={{ gridRowStart: `${newWeatherIcon()}` }} className=\"item-e\" key={newId()} src={selecIcon(item)} />)}\n                        {temp().map(item => <div style={{ gridRowStart: `${newRow()}` }} className=\"item-b\" key={newId()}>{item} ℃ </div>)}\n                        {wind().map(item => <div style={{ gridRowStart: `${newRowWind()}` }} className=\"item-c\" key={newId()}>{item} m/s </div>)}\n                        {windDir().map(item => <div style={{ gridRowStart: `${newRowWindIcon()}` }} className=\"item-d\" key={newId()}>{windIcon(item)}</div>)}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default AllWeather;","import './App.css'\nimport React from 'react';\nimport Openweather from '../api/Openweather';\n\nimport SearchBar from './SearchBar';\nimport WeatherItem from './WeatherItem';\nimport OneDay from './OneDay';\nimport AllWeather from './AllWeather';\n\n\nclass App extends React.Component {\n    state = {\n        days: [],\n        selectedDay: null,\n        city: '',\n        dayName: 'Valitse päivä',\n        dayIDstart: null,\n        dayIDend: null,\n        color1: \"\",\n        color2: \"\",\n        color3: \"\"\n    };\n\n\n    componentDidMount() {\n        const memory = localStorage.getItem('search')\n        if (!memory) {\n            this.onSearchSubmit('Turku')\n        } else {\n            this.onSearchSubmit(memory)\n        }\n    }\n\n    // error handling for api call\n    onSearchSubmit = (term) => {\n        this.Search(term).catch((error) => {\n            if (error.response) { this.setState({ selectedDay: null, city: 'Kaupunkia ei löydy' }) }\n            else if (error.request) { this.setState({ selectedDay: null, city: 'Ei internet yhteyttä' }) }\n            else { this.setState({ selectedDay: null, city: 'Jokin meni pieleen' }) }\n        })\n    }\n\n    // when user gives city, get data from Openweather\n    Search = async term => {\n        const response = await Openweather.get('/data/2.5/forecast', {\n            params: { q: term, units: 'metric', lang: 'fi' }\n        });\n\n        this.setState({ days: response.data.list, selectedDay: 1, city: term })\n\n        localStorage.setItem('search', this.state.city)\n\n    }\n\n\n\n    handler = (day) => {\n        this.setState({ selectedDay: day })\n    }\n\n    dayNameHandler = (name) => {\n        this.setState({ dayName: name })\n    }\n\n    dayStartHandler = (id) => {\n        this.setState({ dayIDstart: id })\n    }\n\n    dayEndHandler = (id) => {\n        this.setState({ dayIDend: id })\n    }\n\n    colorHandler = (code1, code2, code3) => {\n        this.setState({ color1: code1, color2: code2, color3: code3 })\n    }\n\n\n    render() {\n        return (\n            <div className=\"container\">\n                <SearchBar onSubmit={this.onSearchSubmit} />\n                <br></br>\n                <WeatherItem\n                    days={this.state.days}\n                    city={this.state.city}\n                    select={this.state.selectedDay}\n                />\n                <OneDay\n                    select={this.state.selectedDay}\n                    days={this.state.days}\n                    selectDay={this.handler}\n                    dayName={this.dayNameHandler}\n                    dayStart={this.dayStartHandler}\n                    dayEnd={this.dayEndHandler}\n                    color1={this.state.color1}\n                    color2={this.state.color2}\n                    color3={this.state.color3}\n                    color={this.colorHandler}\n                />\n                <AllWeather\n                    koira={this.state.dayIDend}\n                    select={this.state.selectedDay}\n                    dayName={this.state.dayName}\n                    days={this.state.days}\n                    dayIdStart={this.state.dayIDstart}\n                />\n            </div>\n        );\n    }\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nReactDOM.render(\n    <App />,\n    document.querySelector('#root')\n);"],"sourceRoot":""}